# -*- mode: sh; -*-

# Aliases to run emacs+magit
alias magit='e --eval "(progn (magit-status) (delete-other-windows))"'
alias magitt='e -t --eval "(progn (magit-status) (delete-other-windows))"'

# Aliases to run emacs+mu4e
alias emu='e --eval "(progn (=mu4e) (delete-other-windows))"'
alias emut='e -t --eval "(progn (=mu4e) (delete-other-windows))"'

export EDITOR="$HOME/.local/bin/et"
export VISUAL="$HOME/.local/bin/ev"

[[ -f "$HOME/.shell_private" ]] && source "$HOME/.shell_private"

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-bash libs,
# plugins, and themes. Aliases can be placed here, though oh-my-bash
# users are encouraged to define aliases within the OSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias bashconfig="mate ~/.bashrc"
# alias ohmybash="mate ~/.oh-my-bash"

# Define aliases to 'pbcopy' and 'pbpaste'
if command -v xclip &> /dev/null; then
  # Define aliases using xclip
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
elif command -v xsel &> /dev/null; then
  # Define aliases using xsel
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
fi

alias netpaste='curl -F file=@- 0x0.st' # OR 'curl -F f:1=<- ix.io '

# To run GUI apps from terminal with root permissions
if command -v xhost &> /dev/null; then
  alias gsuon='xhost si:localuser:root'
  alias gsuoff='xhost -si:localuser:root'
fi

# NeoVim
if command -v nvim &> /dev/null; then
  alias vim="nvim"
  alias vi="nvim"
fi

if [[ -d "$HOME/Softwares/src/esp-idf/" ]]; then
  alias esp-prepare-env='source $HOME/Softwares/src/esp-idf/export.sh'
  alias esp-update='echo "Updating ESP-IDF framework..." && cd $HOME/src/esp-idf && git pull --all && echo "Updated successfully"'
else
  alias esp-prepare-env='echo "esp-idf repo not found. You can clone the esp-idf repo using git clone https://github.com/espressif/esp-idf.git"'
  alias esp-update=esp-prepare-env
fi

alias wttrin='curl wttr.in/$WTTRIN_CITY'
alias wttrin2='curl v2.wttr.in/$WTTRIN_CITY'

export MINICOM='--metakey --color=on'

export RUST_SRC_PATH="$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/"
export PATH="$PATH:$HOME/.cargo/bin"

# The default is $HOME/go
export GOPATH="$HOME/Projects/go"

[[ -d "/opt/clang-format-static" ]] && export PATH="$PATH:/opt/clang-format-static"

export CMAKE_PREFIX_PATH="$HOME/Softwares/src/install"
export PATH="$PATH:$HOME/Softwares/src/install/bin"

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# If not running inside Emacs (via vterm/eshell...)
if [[ -z "${INSIDE_EMACS}" && ( "${DISPLAY}" || "${SSH_TTY}" ) ]]; then
  if command -v tmux &> /dev/null && [[ -z "${TMUX}" ]]; then
    tmux attach -t default || tmux new -s default
  fi
fi

export PATH="${PATH}:${HOME}/.local/bin"

[[ -f "$HOME/.bitwarden-session" ]] && source "$HOME/.bitwarden-session"
