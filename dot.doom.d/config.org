#+TITLE: My DOOM-Emacs config file
#+AUTHOR: Abdelhak Bougouffa
#+DESCRIPTION: My config file for DOOM-Emacs
#+STARTUP: content showstars
#+KEYWORDS: configuration dotfile doom emacs

* Introduction
Place your private configuration here! Remember, after modifying this file
you need to run =doom sync= or =doom/reload= (aka =SPC h r r=) inside DOOM

** One time commands :commands:
*** =pdf-tools= :pdf:
Install =pdf-tools=, call this if you enabled =tools: pdf= in =init.el=

#+begin_example emacs-lisp
(pdf-tools-install)
#+end_example

*** Languages servers :lsp:
For LSP, you can install supported servers with:

#+begin_example emacs-lisp
(lsp-install-server) ; will asks which server to install
#+end_example

For Irony:

#+begin_example emacs-lisp
(irony-install-server)
#+end_example

* Global settings :global:
Some functionality uses this to identify you, e.g. GPG configuration,
email clients, file templates and snippets.

** User information :user:info:
#+begin_src emacs-lisp
(setq user-full-name "Abdelhak Bougouffa"
      user-mail-address "abougouffa@fedoraproject.org")
#+end_src

** Default encoding :encoding:
Set the default encoding to UTF-8

#+begin_src emacs-lisp
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src

** Native Comp Emacs :native:gcc:
More information on [[https://akrl.sdf.org/gccemacs.html#orgf5ebdd1][akrl.sdf.org/gccemacs.html]]

Enable native compile for the builtin package manager.

#+begin_src emacs-lisp
(setq package-native-compile t)
#+end_src

*** COMMENT Compile all Emacs packages
Natively compile all Elisp files under a directory:

#+begin_src emacs-lisp
;; Use 6 parallel processes
;;(native-compile-async "~/.emacs.d/.local/straight/repos" 6 t)
(native-compile-async "~/.emacs.d/.local/straight/repos" 'recursively)
#+end_src

#+RESULTS:

Get the number of running compilations:

#+begin_src emacs-lisp
(comp-async-runnings)
#+end_src

Block until finished!

#+begin_src emacs-lisp
;; block until native compilation has finished
(while (or comp-files-queue
           (> (comp-async-runnings) 0))
  (sleep-for 1))
#+end_src

* User interface :ui:
** At Startup :startup:
*** Maximize Emacs
At startup, maximize the default Emacs frame

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Splash image
Change the logo to a fancy black hole icon, form [[https://github.com/hlissner/doom-emacs/issues/2204#issuecomment-626654221][this GitHub thread]]

[[file:splash-images/blackhole-lines.svg]]

#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/splash-images/blackhole-lines-small.svg")
#+end_src

** Fonts :font:
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

 - =doom-font=
 - =doom-variable-pitch-font=
 - =doom-big-font= -- used for =doom-big-font-mode=; use this for
   presentations or streaming.

They all accept either a =font-spec=, font string (="Input Mono-12"=), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code Medium" :size 30)
      doom-variable-pitch-font (font-spec :family "Fira Code Medium" :size 30))

;;(setq doom-font (font-spec :family "JetBrains Mono" :size 30)
;;      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 30))
#+end_src

** DOOM Theme and looking :theme:
*** Set =solaire-mode=
Set =solaire-mode= globally:

#+begin_src emacs-lisp
;; Activate solaire-mode, this have to be called before loading the theme
(solaire-global-mode +1)
#+end_src

*** Load theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-one) ; Load theme
;; (setq doom-theme 'doom-palenight) ; Load theme
;; (setq doom-theme 'doom-horizon)   ; Load theme
;; (setq doom-theme 'doom-old-hope)   ; Load theme
;; (setq doom-theme 'doom-snazzy) ; Load theme
;; (setq doom-theme 'doom-peacock) ; Load theme
#+end_src

** Editor Settings :editor:
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative) ; Enable line numbers
#+end_src

** Evil :evil:
*** Enable =evil-numbers=
Enable =evil-numbers= for incrementing number in text

#+begin_src emacs-lisp
(require 'evil-numbers)

(global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
(global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
#+end_src

** DOOM Modeline (=doom-modeline-mode=) :modeline:
Customize the =doom-modeline=

#+begin_src emacs-lisp
;; This will set the time format to 24h
(setq display-time-string-forms
      '((propertize (concat 24-hours ":" minutes))))

(display-battery-mode) ;; Display the battery status
(display-time-mode) ;; Display the time
#+end_src

* Spell checking :spell:
** COMMENT Configure =hunspell= :hunspell:
Having =flyspell= and =hunspell= enabled in =init.el=, first install theses packages:

#+begin_example shell
sudo pacman -S hunspell hunspell-en_US hunspell-en_GB hunspell-fr
#+end_example

Then configure dictionaries:

#+begin_src emacs-lisp
(add-to-list 'ispell-local-dictionary-alist '("francais"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "fr_FR"); Dictionary file name
                                              nil
                                              utf-8))

(add-to-list 'ispell-local-dictionary-alist '("english"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "en_US")
                                              nil
                                              utf-8))

(setq ispell-program-name "hunspell"   ; Use hunspell to correct mistakes
      ispell-dictionary   "english")  ; Default dictionary to use
#+end_src

** COMMENT Define shortcuts to change dictionary :dict:
#+begin_src emacs-lisp
(defun ab-conf/spelldict (lang)
  "Switch between language dictionaries."
  (interactive)
  (cond ((eq lang 1)
         (setq flyspell-default-dictionary "american")
         (setq ispell-dictionary "american")
         (ispell-kill-ispell)
         (spell-fu-mode)
         (spell-fu-mode)
         (message "Dictionary changed to 'american'"))
        ((eq lang 2)
         (setq flyspell-default-dictionary "francais")
         (setq ispell-dictionary "francais")
         (ispell-kill-ispell)
         (spell-fu-mode)
         (spell-fu-mode)
         (message "Dictionary changed to 'francais'"))
        (t (message "No changes have been made."))))

(map! :leader
      :desc "spell/lang" "l")

(map! :leader
      :desc "spell" "l s")

(map! :leader
      :desc "dictionary" "l s d")

(map! :leader
      :desc "American" "l s d a" #'(lambda () (interactive) (ab-conf/spelldict 1)))

(map! :leader
      :desc "Fran√ßais" "l s d f" #'(lambda () (interactive) (ab-conf/spelldict 2)))
#+end_src

** Enable LanguageTool :langtool:
#+begin_src emacs-lisp
(require 'langtool)

(map! :leader
      :desc "langtool" "l l")

(map! :leader
      :desc "Check" "l l l" #'langtool-check)

(map! :leader
      :desc "Correct buffer" "l l b" #'langtool-correct-buffer)

(map! :leader
      :desc "Stop server" "l l s" #'langtool-server-stop)

(map! :leader
      :desc "Done checking" "l l d" #'langtool-check-done)

(map! :leader
      :desc "Show msg at point" "l l m" #'langtool-show-message-at-point)

(map! :leader
      :desc "Next error" "l l n" #'langtool-goto-next-error)

(map! :leader
      :desc "Previous error" "l l p" #'langtool-goto-previous-error)

(map! :leader
      :desc "Switch default language" "l l L" #'langtool-switch-default-language)
#+end_src

* Org-Mode settings :org:
Set the default org-mode directory

#+begin_src emacs-lisp
(setq org-directory "~/Org")
#+end_src

** COMMENT Org Ref

#+begin_src emacs-lisp
(setq org-ref-default-bibliography '("~/Zotero/my-library.bib")
      org-ref-pdf-directory "~/Zotero/storage"
      org-ref-bibliography-notes "~/Org/bibtex/notes.org")
#+end_src

** COMMENT Beamer on Org Mode
#+begin_src emacs-lisp
(custom-set-variables ; in ~/.emacs, only one instance
 '(org-export-latex-classes (quote ; in the init file!
    (("beamer" "\\documentclass{beamer}"
        org-beamer-sectioning))))
 '(org-latex-to-pdf-process (quote
    ((concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")
     "bibtex $(basename %b)"
     (concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")
     (concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")))))
#+end_src

** Export PDF with =mintex=
Enable syntax highlighting in exported PDFs

#+begin_src emacs-lisp
(require 'org)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-src-fontify-natively t)
#+end_src

** Org Journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/Org/journal/")
(setq org-journal-file-format "%Y-%m-%d")
#+end_src

** Org Roam
Change Org Roam settings
#+begin_src emacs-lisp
(setq org-roam-db-location "~/Org/roam/org-roam.db")
(setq org-roam-index-file "~/Org/roam/index.org")
(setq org-roam-directory "~/Org/roam")
#+end_src

** Prettify Org Mode :prettify:
*** Ellipsis
Change the three dots on collapsed Org Mode sections

#+begin_src emacs-lisp
;; (require 'org)
;; (setq org-ellipsis " ‚§µ ")
(setq org-ellipsis " [+]")

(custom-set-faces
 '(org-ellipsis ((t (:foreground "#88883A"))))
 )
#+end_src

*** COMMENT Change font size for section levels
#+begin_src emacs-lisp
(custom-set-faces
 '(org-document-title ((t (:inherit default :height 1.6 :underline nil))))
 '(org-tag ((t (:inherit default :weight bold :height 1.0))))
 '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
 )
#+end_src

*** COMMENT Org Bullets :bullets:
Enable =org-bullets= to use prettier unicode symbols in Org files

#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Literate programming (=org-babel=) :babel:literate:
*** Babel languages
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (C . t)
   (C++ . t)
   (R . t)
   (calc . t)
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (eshell . t)
   (gnuplot . t)
   (latex . t)
   (lisp . t)
   (lua . t)
   (makefile . t)
   (matlab . t)
   (ocaml . t)
   (octave . t)
   (org . t)
   (perl . t)
   (plantuml . t)
   (processing . t)
   (python . t)
   (ruby . t)
   (screen . t)
   (sed . t)
   (shell . t)
   (sql . t)
   (sqlite . t)
   ))

;; (setq org-src-preserve-indentation t)
#+end_src

*** Source blocks (=src=) templates
**** Enable the new template system for Org Mode 9.2 and later
#+begin_src emacs-lisp
(setq ab-conf/new-org-templates t) ;;; (version<= "9.2" (org-version))
(when ab-conf/new-org-templates
  (require 'org-tempo))
#+end_src

**** Template definitions for old and new template systems
#+begin_src emacs-lisp
(defun ab-conf/add-org-template (old-style-template)
  (add-to-list 'org-structure-template-alist
               (if ab-conf/new-org-templates ; change the template format for Org Mode >= 9.8
                   (cons
                    (car old-style-template)
                    ;; Take the second element and trim the #+begin_ and #+end_src
                    ;; to fit the new template style
                    ;; For example,
                    ;; ("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>")
                    ;; becomes
                    ;; ("m" "src emacs-lisp\n\n" "<src lang=\"emacs-lisp\">\n\n</src>")
                    (string-trim-right
                     (substring (car (cdr old-style-template)) 8 -9)))
                 old-style-template)))
#+end_src

**** Define templates
To use this type the prefix (like =<s=) and then =TAB=

| Prefix | Language                                        |
|--------+-------------------------------------------------|
| =<s=   | Generic (=#src= block)                          |
|--------+-------------------------------------------------|
| =<m=   | Emacs Lisp                                      |
|--------+-------------------------------------------------|
| =<r=   | R                                               |
| =<R=   | R + session + graphics                          |
| =<RR=  | Like =R=, with graphics stored with the project |
|--------+-------------------------------------------------|
| =<p=   | Python                                          |
| =<P=   | Python + session                                |
| =<PP=  | Python + session + graphics                     |
|--------+-------------------------------------------------|
| =<b=   | Bash shell                                      |
| =<B=   | Badh shell + session                            |
|--------+-------------------------------------------------|
| =<g=   | Graphviz                                        |
|--------+-------------------------------------------------|


***** Generic =src= block =<s=
#+begin_src emacs-lisp
(unless ab-conf/new-org-templates
  ;; this template is predefined in the new templating system
  (ab-conf/add-org-template
   '("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")))
#+end_src

***** Emacs-Lisp (=<m=)
#+begin_src emacs-lisp
;; Emacs-lisp
(ab-conf/add-org-template
 '("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))
#+end_src

***** R (=<r=, =<R=, =<RR=)
#+begin_src emacs-lisp
;; R
(ab-conf/add-org-template
 '("r" "#+begin_src R :results output :session *R* :exports both\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))

;; R, this creates an R block for graphics
;; that are stored in the =/tmp/=.
(ab-conf/add-org-template
 '("R" "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))

;; R, this creates an R block for
;; graphics that are stored in the directory of the current file.
(ab-conf/add-org-template
 '("RR" "#+begin_src R :results output graphics :file  (org-babel-temp-file (concat (file-name-directory (or load-file-name buffer-file-name)) \"figure-\") \".png\") :exports both :width 600 :height 400 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+end_src

***** Python (=<p=, =<P=, =<PP=)
#+begin_src emacs-lisp
;; Python
(ab-conf/add-org-template
 '("p" "#+begin_src python :results output :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(ab-conf/add-org-template
 '("P" "#+begin_src python :results output :session *py* :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(ab-conf/add-org-template
 '("PP" "#+begin_src python :results file :session *py* :var matplot_lib_filename=(org-babel-temp-file \"figure\" \".png\") :exports both\nimport matplotlib.pyplot as plt\n\nimport numpy\nx=numpy.linspace(-15,15)\nplt.figure(figsize=(10,5))\nplt.plot(x,numpy.cos(x)/x)\nplt.tight_layout()\n\nplt.savefig(matplot_lib_filename)\nmatplot_lib_filename\n#+end_src" "<src lang=\"python\">\n\n</src>"))
#+end_src

***** Bash Shell (=<b=, =<B=, =<bn=)
#+begin_src emacs-lisp
;; Bash Shell
(if (memq system-type '(windows-nt ms-dos))
    ;; Non-session shell execution does not seem to work under Windows, so we use
    ;; a named session just like for B.
    (ab-conf/add-org-template
     '("b" "#+begin_src shell :session session :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
  (ab-conf/add-org-template
   '("b" "#+begin_src shell :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>")))

;; Bash Shell, this comes with a session argument (e.g., in case you want to keep ssh connexions open).
(ab-conf/add-org-template
 '("B" "#+begin_src shell :session *shell* :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))

;; Bash Shell, simple box
(ab-conf/add-org-template
 '("bn" "#+begin_src shell \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+end_src

***** Graphviz (=<g=)
#+begin_src emacs-lisp
;; Graphviz
(ab-conf/add-org-template
 '("g" "#+begin_src dot :results output graphics :file \"/tmp/graph.pdf\" :exports both
digraph G {
node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname=\"Helvetica\"];
A[label=\"A\"]
B[label=\"B\"]
A->B
}\n#+end_src" "<src lang=\"dot\">\n\n</src>"))
#+end_src

*** COMMENT Set custom path for =ditaa= :ditaa:
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/share/java/ditaa/")
#+end_src

** COMMENT RTL languages :rtl:arabic:
Enables [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bidirectional-Editing.html][bidirectional editing]]

#+begin_src emacs-lisp
(defun ab-conf/set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
(add-hook 'org-mode-hook 'ab-conf/set-bidi-env)
#+end_src

** COMMENT Org-CV :cv:
#+begin_src emacs-lisp
(require 'ox-moderncv)
#+end_src

*** Important notice
In the CV project, you need to import the =moderncv= from the above repo.
The compiling of the exported TeX file may fails, with a
=File `l3regex.sty' not found= error, this seems to be in relation with the new
package names in the TexLive distribution. To solve this, you need to
replace =\RequirePackage{l3regex}= by =\RequirePackage{expl3}= in
the =moderncv.cls= file.

*** Compiling the CV file
To compile, you need to call two functions, you can add them in the file
under a =:noexport:= section:

#+begin_example org

#+begin_src emacs-lisp
(org-export-to-file 'moderncv "filename.tex")
(org-latex-compile "filename.tex")
#+end_src

#+end_example

* GTD workflow :gtd:
Parts from this section has been taken form
[[https://www.labri.fr/perso/nrougier/GTD/index.html][Nicolas P. Rougier - Get Things Done with Emacs]] article.

** Files and directories
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Org/inbox.org" "~/Org/agenda.org"
                             "~/Org/notes.org" "~/Org/projects.org"))
;; (setq org-agenda-files (list "~/Work/org"))
#+end_src

*** COMMENT Initial content of files
**** The =inbox.org= file:
#+begin_example org :eval never
#+STARTUP: content showstars indent
#+FILETAGS: inbox
#+end_example

The =STARTUP= line defines some buffer settings (initial visibility, indent mode and star visibility)
while the =FILETAGS= line define a common tag that will be inherited by all entries (=inbox= in this case).

**** The =agenda.org= file:
#+begin_example org
#+STARTUP: hideall showstars indent
#+TAGS:    event(e) meeting(m) deadline(d)
#+TAGS:    @outside(o) @company(p) @lab(b) @online(l) @canceled(c)
#+end_example

**** The =projects.org= file:
#+begin_example org
#+STARTUP: content showstars indent
#+TAGS: @home(h) @work(w) @mail(m) @comp(c) @web(b)
#+PROPERTY: Effort_ALL 0 0:05 0:10 0:15 0:30 0:45 1:00 2:00 4:00

# UNCOMMEND THESE LINES
# * Students :students:
# * Team :team:
# * Collaboratorive projects :collaborative:project:
# * Events organization :events:
# * Academic papers :article:
# * Personal projects :personal:project:
# * ez-Wheel :ezwheel:
# * Home :home:
#+end_example

** Capture and inbox
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i" "Inbox" entry (file "inbox.org")
         "* TODO %?\n/Entered on/ %U")
        ("m" "Meeting" entry (file+headline "agenda.org" "Future")
         "* %? :meeting:\n<%<%Y-%m-%d %a %H:00>>")
        ("n" "Note" entry (file "notes.org")
         "* Note (%a)\n/Entered on/ %U\n" "\n" "%?")
        ("@" "Inbox [mu4e]" entry (file "inbox.org")
         "* TODO Reply to \"%a\" %?\n/Entered on/ %U")))


(defun org-capture-inbox ()
     (interactive)
     (call-interactively 'org-store-link)
     (org-capture nil "i"))

(defun org-capture-mail ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "@"))
#+end_src

** Display and key bindings
#+begin_src emacs-lisp
;; Use full window for org-capture
;; (add-hook 'org-capture-mode-hook 'delete-other-windows)

;; Key bindings
(define-key global-map            (kbd "C-c a") 'org-agenda)
(define-key global-map            (kbd "C-c c") 'org-capture)
(define-key global-map            (kbd "C-c i") 'org-capture-inbox)

;; Only if you use mu4e
(require 'mu4e)
(define-key mu4e-headers-mode-map (kbd "C-c i") 'org-capture-mail)
(define-key mu4e-view-mode-map    (kbd "C-c i") 'org-capture-mail)
#+end_src

** Refile
#+begin_src emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-targets
      '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
#+end_src

** TODOs
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")))
(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
#+end_src

** Agenda
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

* Windows and buffers :win:buffer:
** Splits :split:
Force splits to open on the right

#+begin_src emacs-lisp
(defun ab-conf/prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'ab-conf/prefer-horizontal-split)
#+end_src

** Add margins to window
Add margins to buffer in Org Mode, change the =visual-fill-column-width= to the desired width of the actual window (in letters, and counting the line number).

#+begin_src emacs-lisp
(defun ab-conf/org-mode-visual-fill ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . ab-conf/org-mode-visual-fill))
#+end_src

Add the same hook to other modes (=text-mode=, =markdown-mode=, =tex-mode-hook=, =repo-mode= and =magit-mode=), you can set additional modes in the list below:

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook markdow-mode-hook tex-mode-hook magit-mode-hook repo-mode-hook))
  (add-hook hook 'ab-conf/org-mode-visual-fill))
#+end_src

* Applications :apps:
** PDF viewer
Org opens PDF files with Zathura

#+begin_example shell
# First install the zathura and the plugins
pacman -S zathura zathura-pdf-poppler zathura-ps zathura-cb zathura-djvu
#+end_example

#+begin_src emacs-lisp
  (setq org-ref-open-pdf-function
        (lambda (fpath)
          (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+end_src
** Browser (=eww=) :eww:
Set urls to open in a specific browser (=eww= here).

*** COMMENT Display webpages in =eww=.
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

** File manager (=dired=) :dired:
Enable image previews in =dired= and use Vim-style key binding for =<UP>= and =<DOWN>=

#+begin_src emacs-lisp
(map!
  (:after dired
    (:map dired-mode-map
     "C-x i" #'peep-dired
     )))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

** COMMENT Emacs Multi-Media System (=emms=) :emms:
*** Define keybinding
#+begin_src emacs-lisp
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playing-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      :desc "Go to emms playlist"
      "a a" #'emms-playlist-mode-go
      :leader
      :desc "Emms pause track"
      "a x" #'emms-pause
      :leader
      :desc "Emms stop track"
      "a s" #'emms-stop
      :leader
      :desc "Emms play previous track"
      "a p" #'emms-previous
      :leader
      :desc "Emms play next track"
      "a n" #'emms-next)
#+end_src

*** COMMENT Mode line settings
#+begin_src emacs-lisp
(custom-set-variables
 '(emms-mode-line-format "%s")
 '(emms-show-format "EMMS: %s")
 '(emms-source-file-default-directory "~/Music/"))

(defun string-shift-left (str &optional offset)
  "Shift STR content to the left OFFSET characters."
  (or offset (setq offset 1))
  (let ((str-len (length str)))
    (if (< offset str-len)
        (concat (substring-no-properties str offset)
                (substring-no-properties str 0 offset))
      str)))

(defun emms-tick-mode-line-description (offset)
  "Tick emms track description OFFSET characters."
  (setq emms-mode-line-string
        (string-shift-left emms-mode-line-string offset)))

(defvar *my-emms-ticker* nil
  "Timer for current track info ticker.")

(defun emms-track-ticker-start ()
  "Start ticking current TRACK info."
  (or *my-emms-ticker*
      (setq *my-emms-ticker*
            (run-at-time t 2
                         'emms-tick-mode-line-description 5))))

(defun emms-track-ticker-stop ()
  "Stop ticking current TRACK info."
  (when *my-emms-ticker*
    (cancel-timer *my-emms-ticker*)
    (setq *my-emms-ticker* nil)))

(add-hook 'emms-player-started-hook 'emms-track-ticker-start)
(add-hook 'emms-player-stopped-hook 'emms-track-ticker-stop)
(add-hook 'emms-player-finished-hook 'emms-track-ticker-stop)
(add-hook 'emms-player-paused-hook
          (lambda () "Start/Stop track ticker."
            (if *my-emms-ticker*
                (emms-track-ticker-stop)
              (emms-track-ticker-start))))
#+end_src

** Serial port support (=serial-term=) :serial:
#+begin_src emacs-lisp
(map! :leader
      :desc "Open serial port terminal" "o s" #'serial-term)
#+end_src

** mu4e :mu4e:
Configuring =mu4e= email accounts, note that you need to have a proper
=mbsyncrc= file in the right directory.

You will need to:
- Install =mu= and =mbsync-git=
- Setup a proper configuration file for your accounts at =~/config/mu4e/mbsyncrc=
- Setup the associated password file =mbsyncpass-account1= in the same directory
  for each account
- Encrypt the password file using =gpg -c mbsyncpass-account1=
- Run =mu init --maildir=~/Maildir --my-address=user@host.bla=
- Run =mbsync -c ~/.config/mu4e/mbsyncrc -a=
- For sending mails from =mu4e=, add =authinfo= files for each account, file contains
  a line in this format =machine mail.example.org port 587 login myuser password mypasswd=

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)
(require 'smtpmail)
(setq user-mail-address "email@server"
      user-full-name  "Abdelhak Bougouffa"
      mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a"
      mu4e-update-interval 300
      mu4e-compose-signature
      (concat "- Abdelhak BOUGOUFFA\n"
              "- Doctorant | Ing√©nieur R&D\n"
              "- Universit√© Paris-Saclay - SATIE | ez-Wheel\n")
      mu4e-main-buffer-hide-personal-addresses t
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-smtp-service 587
      smtpmail-smtp-server "ex.mail.ovh.net"
      smtpmail-auth-credentials (expand-file-name "~/.config/mu4e/authinfo.gpg")
      mu4e-sent-folder "/mail/Sent Items"
      mu4e-drafts-folder "/mail/Drafts"
      mu4e-trash-folder "/mail/Trash")
#+end_src

* Programming Languages :programming:
** COMMENT Rust :rust:
#+begin_src emacs-lisp
(use-package racer
  :requires rust-mode

  :init (setq racer-rust-src-path
              (concat (string-trim
                       (shell-command-to-string "rustc --print sysroot"))
                      "/lib/rustlib/src/rust/src"))

  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+end_src

** Yocto/Bitbake :yocto:
#+begin_src emacs-lisp
(require 'bitbake)
(setq auto-mode-alist (cons '("\\.bb$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.inc$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.bbappend$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.bbclass$" . bitbake-mode) auto-mode-alist))
#+end_src

** ROS :ros:
#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.launch$" . xml-mode) auto-mode-alist))
#+end_src
** LSP :lsp:
*** Enable =lsp= over =tramp=
**** For Python
#+begin_src emacs-lisp
(require 'lsp-mode)
(require 'lsp-pyright)
;;(setq lsp-enable-snippet nil)
;;(setq lsp-log-io t)
(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-tramp-connection (lambda ()
                                          (cons "pyright-langserver"
                                                lsp-pyright-langserver-command-args)))
  :major-modes '(python-mode)
  :remote? t
  :server-id 'pyright-remote
  ;;  :multi-root t
  ;;  :priority 3
  ;;  :initialization-options (lambda () (ht-merge (lsp-configuration-section "pyright")
  ;;                                               (lsp-configuration-section "python")))
  ;; :initialized-fn (lambda (workspace)
  ;;                   (with-lsp-workspace workspace
  ;;                     (lsp--set-configuration
  ;;                      (ht-merge (lsp-configuration-section "pyright")
  ;;                                (lsp-configuration-section "python")))))
  ;; :notification-handlers (lsp-ht ("pyright/beginProgress" 'lsp-pyright--begin-progress-callback)
  ;;                                ("pyright/reportProgress" 'lsp-pyright--report-progress-callback)
  ;;                                ("pyright/endProgress" 'lsp-pyright--end-progress-callback))

  ))

(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

**** For C/C++
#+begin_src emacs-lisp
(require 'lsp-mode)
(require 'ccls)
(setq lsp-enable-snippet nil)
(setq lsp-log-io t)
(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-tramp-connection (lambda ()
                                          (cons ccls-executable ; executable name on remote machine 'ccls'
                                                ccls-args)))
  :major-modes '(c-mode c++-mode objc-mode cuda-mode)
  :remote? t
  :server-id 'ccls-remote
  ;;  :multi-root t
  ;;  :priority 3
  ;;  :initialization-options (lambda () (ht-merge (lsp-configuration-section "c++")
  ;;                                               (lsp-configuration-section "ccls")))
  ;; :initialized-fn (lambda (workspace)
  ;;                   (with-lsp-workspace workspace
  ;;                     (lsp--set-configuration
  ;;                      (ht-merge (lsp-configuration-section "c++")
  ;;                                (lsp-configuration-section "ccls")))))
  ;; :notification-handlers (lsp-ht ("$ccls/publishSkippedRanges" 'cls--publish-skipped-ranges)
  ;;                                ("$ccls/publishSemanticHighlight" 'cls--publish-semantic-highlight))
  ))

(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

#+RESULTS:
