#+TITLE: My DOOM-Emacs config file
#+AUTHOR: Abdelhak Bougouffa
#+DESCRIPTION: My config file for DOOM-Emacs
#+STARTUP: content showstars

* Introduction
Place your private configuration here! Remember, after modifying this file
you need to run =doom sync= or =doom/reload= (aka =SPC h r r=) inside DOOM

* Global settings
Some functionality uses this to identify you, e.g. GPG configuration,
email clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Abdelhak Bougouffa"
      user-mail-address "abougouffa@cryptolab.net")
#+end_src

** COMMENT Add =quelpa= support
=quelpa= is a tool to compile and install Emacs Lisp packages locally from local or remote source code.

#+begin_src emacs-lisp
(unless (package-installed-p 'quelpa)
   (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
#+end_src

*** Install =quelpa-use-package=
Install =quelpa-use-package= (which installs =use-package= as a
dependency) and require the =quelpa= library:

#+begin_src emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
#+end_src

**** Usage examples
We will be able to call =use-package= with the =:quelpa= keyword,
like this:

#+begin_example emacs-lisp
;; installs abc-mode with quelpa
(use-package abc-mode :quelpa)

;; does the same (`t' is optional)
(use-package abc-mode :quelpa t)

;; again... (if the package would have another name)
(use-package abc-mode :quelpa abc-mode)

;; passes upgrade parameter to quelpa
(use-package abc-mode :quelpa (:upgrade t))

;; uses the given recipe
(use-package abc-mode
  :quelpa (abc-mode :fetcher github :repo "mkjunker/abc-mode"))

;; recipe with plist arguments
(use-package abc-mode
  :quelpa ((abc-mode :fetcher github :repo "mkjunker/abc-mode") :upgrade t))
#+end_example

* User interface
** At Startup
*** Maximize Emacs
At startup, maximize the default Emacs frame

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Change the logo of the doom's dashboard
Change the logo to a fancy black hole icon, form [[https://github.com/hlissner/doom-emacs/issues/2204#issuecomment-626654221][this github thread]]

#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/blackhole.png")
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

 - =doom-font=
 - =doom-variable-pitch-font=
 - =doom-big-font= -- used for =doom-big-font-mode=; use this for
   presentations or streaming.

They all accept either a =font-spec=, font string (="Input Mono-12"=), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Mononoki Nerd Font" :size 30)
       doom-variable-pitch-font (font-spec :family "Mononoki Nerd Font" :size 30))
#+end_src

** DOOM Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

** Editor Settings
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp
(setq display-line-numbers-type t) ; Enable line numbers
#+end_src

** Evil
*** Enable =evil-numbers=
Enable =evil-numbers= for incrementing number in text

#+begin_src emacs-lisp
(require 'evil-numbers)

(global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
(global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
#+end_src

** DOOM Modeline (=doom-modeline-mode=)
Customize the =doom-modeline=

#+begin_src emacs-lisp
;; This will set the time format to 24h
(setq display-time-string-forms
      '((propertize (concat 24-hours ":" minutes))))

(display-time-mode) ;; Display the time
(display-battery-mode) ;; Display the battery status
#+end_src

* Orgmode settings
Set the default org-mode directory

#+begin_src emacs-lisp
(setq org-directory "~/Work/org/")
#+end_src

** Org Bullets
Enable =org-bullets= to use prettier unicode symbols in Org files

#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Org Babel
*** Ditaa
Activate =ditaa=

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t))) ; this line activates ditaa
#+end_src

**** COMMENT Set custom path for =ditaa=
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/share/java/ditaa/")
#+end_src

** RTL languages
Enables [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bidirectional-Editing.html][bidirectional editing]]

#+begin_src emacs-lisp
(defun ab-conf/set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
(add-hook 'org-mode-hook 'ab-conf/set-bidi-env)
#+end_src

** Org-CV
#+begin_src emacs-lisp
(require 'ox-moderncv)
#+end_src

** COMMENT Org-CV
Install [[https://titan-c.gitlab.io/org-cv/][=org-cv=]], note that Org-CV uses a modified version of
=moderncv= and =altacv=, they are available on github
([[https://github.com/Titan-C/moderncv][Titan-C/moderncv]] and [[https://github.com/Titan-C/moderncv][Titan-C/AltaCV]]).

#+begin_src emacs-lisp :exports never
(use-package ox-moderncv
  :quelpa (ox-moderncv :fetcher github :repo "Titan-C/org-cv")
  :init (require 'ox-moderncv)
)

; For installing the AltaCV exporter too
(use-package ox-altacv
  :quelpa (ox-altacv :fetcher github :repo "Titan-C/org-cv")
  :init (require 'ox-altacv)
)
#+end_src

*** Important notice
In the CV project, you need to import the =moderncv= from the above repo.
The compiling of the exported TeX file may fails, with a
=File `l3regex.sty' not found= error, this seems to be in relation with the new
package names in the TexLive distribution. To solve this, you need to
replace =\RequirePackage{l3regex}= by =\RequirePackage{expl3}= in
the =moderncv.cls= file.

*** Compiling the CV file
To compile, you need to call two functions, you can add them in the file
under a =:noexport:= section:

#+begin_example org

#+begin_src emacs-lisp
(org-export-to-file 'moderncv "filename.tex")
(org-latex-compile "filename.tex")
#+end_src

#+end_example

* GTD workflow
Parts from this section has been taken form
[[https://www.labri.fr/perso/nrougier/GTD/index.html][Nicolas P. Rougier - Get Things Done with Emacs]] article.

** Files and directories
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Work/org/inbox.org" "~/Work/org/agenda.org"
                             "~/Work/org/notes.org" "~/Work/org/projects.org"))
;(setq org-agenda-files (list "~/Work/org"))
#+end_src

*** COMMENT Initial content of files
**** The =inbox.org= file:
#+begin_example org :eval never
#+STARTUP: content showstars indent
#+FILETAGS: inbox
#+end_example

The =STARTUP= line defines some buffer settings (initial visibility, indent mode and star visibility)
while the =FILETAGS= line define a common tag that will be inherited by all entries (=inbox= in this case).

**** The =agenda.org= file:
#+begin_example org
#+STARTUP: hideall showstars indent
#+TAGS:    event(e) meeting(m) deadline(d)
#+TAGS:    @outside(o) @company(p) @lab(b) @online(l) @canceled(c)
#+end_example

**** The =projects.org= file:
#+begin_example org
#+STARTUP: content showstars indent
#+TAGS: @home(h) @work(w) @mail(m) @comp(c) @web(b)
#+PROPERTY: Effort_ALL 0 0:05 0:10 0:15 0:30 0:45 1:00 2:00 4:00

# UNCOMMEND THESE LINES
# * Students :students:
# * Team :team:
# * Collaboratorive projects :collaborative:project:
# * Events organization :events:
# * Academic papers :article:
# * Personal projects :personal:project:
# * ez-Wheel :ezwheel:
# * Home :home:
#+end_example

** Capture and inbox
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i" "Inbox" entry (file "inbox.org")
         "* TODO %?\n/Entered on/ %U")
        ("m" "Meeting" entry (file+headline "agenda.org" "Future")
         "* %? :meeting:\n<%<%Y-%m-%d %a %H:00>>")
        ("n" "Note" entry (file "notes.org")
         "* Note (%a)\n/Entered on/ %U\n" "\n" "%?")
        ("@" "Inbox [mu4e]" entry (file "inbox.org")
         "* TODO Reply to \"%a\" %?\n/Entered on/ %U")))


(defun org-capture-inbox ()
     (interactive)
     (call-interactively 'org-store-link)
     (org-capture nil "i"))

(defun org-capture-mail ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "@"))
#+end_src

** Display and key bindings
#+begin_src emacs-lisp
;; Use full window for org-capture
;(add-hook 'org-capture-mode-hook 'delete-other-windows)

;; Key bindings
(define-key global-map            (kbd "C-c a") 'org-agenda)
(define-key global-map            (kbd "C-c c") 'org-capture)
(define-key global-map            (kbd "C-c i") 'org-capture-inbox)

;; Only if you use mu4e
(require 'mu4e)
(define-key mu4e-headers-mode-map (kbd "C-c i") 'org-capture-mail)
(define-key mu4e-view-mode-map    (kbd "C-c i") 'org-capture-mail)
#+end_src

** Refile
#+begin_src emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-targets
      '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
#+end_src

** TODOs
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")))
(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
#+end_src

** Agenda
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

** Beamer on Org Mode
#+begin_src emacs-lisp
(custom-set-variables ; in ~/.emacs, only one instance
 '(org-export-latex-classes (quote ; in the init file!
    (("beamer" "\\documentclass{beamer}"
        org-beamer-sectioning))))
 '(org-latex-to-pdf-process (quote
    ((concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")
     "bibtex $(basename %b)"
     (concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")
     (concat "pdflatex -interaction nonstopmode"
             "-shell-escape -output-directory %o %f")))))
#+end_src

* Windows and buffers
** Splits
Force splits to open on the right

#+begin_src emacs-lisp
(defun ab-conf/prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'ab-conf/prefer-horizontal-split)
#+end_src

** Add margins to window
Add margins to buffer in Org Mode, change the =visual-fill-column-width= to the desired width of the actual window (in letters, and counting the line number).

#+begin_src emacs-lisp
(defun ab-conf/org-mode-visual-fill ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . ab-conf/org-mode-visual-fill))
#+end_src

Add the same hook to other modes (=text-mode=, =markdown-mode=, =tex-mode-hook= and =magit-mode=), you can set additional modes in the list below:

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook markdow-mode-hook tex-mode-hook magit-mode-hook))
  (add-hook hook 'ab-conf/org-mode-visual-fill))
#+end_src

* Applications
** Browser (=eww=)
Set urls to open in a specific browser (=eww= here).

*** COMMENT Display webpages in =eww=.
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

** File manager (=dired=)
Enable image previews in =dired= and use Vim-style key binding for =<UP>= and =<DOWN>=

#+begin_src emacs-lisp
(map!
  (:after dired
    (:map dired-mode-map
     "C-x i" #'peep-dired
     )))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

** Emacs Multi-Media System (=emms=)
#+begin_src emacs-lisp
(use-package emms
  :config
  (require 'emms-setup)
  (require 'emms-info)
  (require 'emms-cue)
  (require 'emms-mode-line)
  (require 'emms-playing-time)
  (setq emms-source-file-default-directory "~/Music/Mohamed Rouane - Nulle Part/")
  (setq emms-playlist-buffer-name "*EMMS Playlist*")
  (setq emms-info-asynchronously t)
  (unless (eq system-type 'windows-nt)
    (setq emms-source-file-directory-tree-function
          'emms-source-file-directory-tree-find))
  (emms-all)
  (emms-default-players)
  (emms-mode-line 1)
  (emms-playing-time 1))
#+end_src

Add keybinding to launch EMMS (=SPC o M=)

#+begin_src emacs-lisp
(map! :leader
      :desc "Open EMMS" "o M" #'emms)
#+end_src

** Serial port support (=serial-term=)
#+begin_src emacs-lisp
(map! :leader
      :desc "Open serial port terminal" "o s" #'serial-term)
#+end_src

** Using =ripgrep= in Emacs
#+begin_src emacs-lisp
(use-package emacs-rg
 :requires 'rg)
#+end_src

** mu4e
Configuring =mu4e= email accounts, note that you need to have a proper
=mbsyncrc= file in the right directory.

You will need to:
- Install =mu= and =mbsync-git=
- Setup a proper configuration file for your accounts at =~/config/mu4e/mbsyncrc=
- Setup the associated password file =mbsyncpass-account1= in the same directory
  for each account
- Encrypt the password file using =gpg -c mbsyncpass-account1=
- Run =mu init --maildir=~/Maildir --my-address=user@host.bla=
- Run =mbsync -c ~/.config/mu4e/mbsyncrc -a=
- For sending mails from =mu4e=, add =authinfo= files for each account, file contains
  a line in this format =machine mail.example.org port 587 login myuser password mypasswd=

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'mu4e)
(require 'smtpmail)
(setq user-mail-address "user@example.com"
      user-full-name  "Abdelhak Bougouffa"
      mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a"
      mu4e-update-interval 300
      mu4e-compose-signature
      (concat "- Abdelhak BOUGOUFFA\n"
              "- Doctorant | Ingénieur R&D\n"
              "- Université Paris-Saclay - SATIE | ez-Wheel\n")
      mu4e-main-buffer-hide-personal-addresses t
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-smtp-service 587
      smtpmail-smtp-server "smtp.example.com"
      ;; smtpmail-starttls-credentials (expand-file-name "~/.config/mu4e/authinfo.gpg")
      smtpmail-auth-credentials (expand-file-name "~/.config/mu4e/authinfo.gpg")
      mu4e-sent-folder "/account/Sent Items"
      mu4e-drafts-folder "/account/Drafts"
      mu4e-trash-folder "/account/Trash"
      mu4e-maildir-shortcuts
      '(("/account0/INBOX" . ?i)
        ("/account/INBOX"          . ?I)
        ("/account/Sent Items"     . ?s)
        ("/account/Drafts"         . ?d)
        ("/account/Trash"          . ?t)))
#+end_src

* Programming Languages
** Rust
#+begin_src emacs-lisp
(use-package racer
  :requires rust-mode

  :init (setq racer-rust-src-path
              (concat (string-trim
                       (shell-command-to-string "rustc --print sysroot"))
                      "/lib/rustlib/src/rust/src"))

  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+end_src
