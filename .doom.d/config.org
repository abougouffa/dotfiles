# -*- fill-column: 100 -*-
#+TITLE: My DOOM-Emacs config file
#+AUTHOR: Abdelhak Bougouffa
#+DESCRIPTION: My config file for DOOM-Emacs
#+STARTUP: fold showstars
#+OPTIONS: toc:t
#+KEYWORDS: configuration dotfile doom emacs
#+LATEX_HEADER: \usepackage[paper=a4paper, left=2cm, right=2cm, top=3cm, bottom=3cm]{geometry}
#+LATEX_HEADER: \emergencystretch 2em%

* Introduction
Place your private configuration here! Remember, after modifying this file
you need to run =doom sync= or =doom/reload= (aka =SPC h r r=) inside DOOM

* Early Bootstrap
To prevent Emacs from showing the annoying white screen with tool and menu bars.

** Maximize Emacs
At startup, maximize the default Emacs frame

#+begin_src emacs-lisp
(toggle-frame-maximized)
;;(toggle-frame-fullscreen)
#+end_src

** Set Foreground
To prevent showing the un-themed window at startup.

#+begin_src emacs-lisp
(set-background-color "#21242B")
#+end_src

** Hide Menus and Toolbar
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

* Global settings :global:
Some functionality uses this to identify you, e.g. GPG configuration,
email clients, file templates and snippets.

** User information :user:info:
#+begin_src emacs-lisp
(setq user-full-name "Abdelhak Bougouffa"
      user-mail-address "abougouffa@fedoraproject.org")
#+end_src

** Add to load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.doom.d/lisp/")
#+end_src

** Secrets :gpg:
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil)
#+end_src

** Scratch buffer
#+begin_src emacs-lisp
(setq doom-scratch-initial-major-mode "emacs-lisp-mode")
#+end_src

** Default encoding :encoding:
Set the default encoding to UTF-8

#+begin_src emacs-lisp
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src

** View Large Files :large:file:
#+begin_src emacs-lisp
(require 'vlf-setup)
#+end_src

** Native Comp Emacs :native:gcc:
More information on [[https://akrl.sdf.org/gccemacs.html#orgf5ebdd1][akrl.sdf.org/gccemacs.html]]

Enable native compile for the builtin package manager.

#+begin_src emacs-lisp
(setq package-native-compile t)
#+end_src

*** COMMENT Compile all Emacs packages
Natively compile all Elisp files under a directory:

#+begin_src emacs-lisp
(native-compile-async "~/.emacs.d/.local/straight/repos" 'recursively)
#+end_src

#+RESULTS:

Get the number of running compilations:

#+begin_src emacs-lisp
(comp-async-runnings)
#+end_src

Block until finished!

#+begin_src emacs-lisp
;; block until native compilation has finished
(while (or comp-files-queue
           (> (comp-async-runnings) 0))
  (sleep-for 1))
#+end_src

* User interface :ui:
** Fonts :font:
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

 - =doom-font=
 - =doom-variable-pitch-font=
 - =doom-big-font= -- used for =doom-big-font-mode=; use this for
   presentations or streaming.

They all accept either a =font-spec=, font string (="Input Mono-12"=), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Calling Code" :size 30)
      doom-variable-pitch-font (font-spec :family "Calling Code" :size 30))
;(setq doom-font (font-spec :family "JetBrains Mono" :size 28)
;      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 28))
#+end_src

** DOOM Theme and looking :theme:
*** COMMENT Set =solaire-mode=
Set =solaire-mode= globally:

#+begin_src emacs-lisp
;; Activate solaire-mode, this have to be called before loading the theme
(solaire-global-mode +1)
#+end_src

*** Load theme
#+begin_src emacs-lisp
; (setq doom-theme 'doom-one) ; Load theme
(setq doom-theme 'doom-nord) ; Load theme
#+end_src

*** Splash image
Taken from [[https://github.com/tecosaur/emacs-config/blob/master/config.org#splash-screen][tecosaur/emacs-config]]

#+begin_src emacs-lisp
(defvar fancy-splash-image-template
  (expand-file-name "assets/emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

**** COMMENT My old one
Change the logo to a fancy black hole icon, form [[https://github.com/hlissner/doom-emacs/issues/2204#issuecomment-626654221][this GitHub thread]]

[[file:splash-images/blackhole-lines.svg]]

#+begin_src emacs-lisp
(setq fancy-splash-image "~/.doom.d/images/blackhole-lines-small.svg")
#+end_src

** Beacon Mode
Never lose your cursor!

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

** Tabs (=centaur-tabs=)
#+begin_src emacs-lisp
(setq centaur-tabs-modified-marker "‚óè")
#+end_src

** COMMENT Child frames (=ivy-posframe=)
Display =ivy-posframe= at frame top center.

#+begin_src emacs-lisp
(after! ivy-posframe
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))))
#+end_src

** Editor Settings :editor:
*** Trash vs. Delete
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
#+end_src

*** Line numbers
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative) ; Enable line numbers
#+end_src

*** Highlight Indent Guides

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
#+end_src

*** Undo & auto-save
#+begin_src emacs-lisp
(setq undo-limit 80000000     ; Raise undo-limit to 80Mb
      evil-want-fine-undo t   ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t)    ; Nobody likes to loose work, I certainly don't
#+end_src

** HiDPI
*** COMMENT HiDPI Scaling
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 160)
#+end_src
*** Fringe HiDPI icons
Taken from Leo Vivier (=zaeph=) configuration

#+begin_src emacs-lisp
;; Set fringe sizes
;; (fringe-mode 20)
;; (set-fringe-style (quote (20 . 10)))

(defun my-define-fringe-bitmap-advice (fun bitmap bits &optional
                                           height width align)
  (when (<= (or width 8) 8)
    (setq width (* (or width 8) 2)
          height (when height (* height 2))
          bits (vconcat (mapcan
                         (lambda (in)
                           (let ((out 0))
                             (dotimes (i 8 (list out out))
                               (setq out (+ out (lsh (* (logand in 1)
                                                        3) (* i 2)))
                                     in (/ in 2)))))
                         bits))))
  (funcall fun bitmap bits height width align))
(advice-add #'define-fringe-bitmap :around #'my-define-fringe-bitmap-advice)

;; (use-package fringe-hidpi-icons)
;; (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

;; (use-package prog-mode
;;   ;; Force fringe indicators
;;   :hook ((prog-mode . ab:enable-visual-line-fringe-indicators)
;;          (prog-mode . outline-minor-mode)
;;          (prog-mode . hs-minor-mode))
;;   :config
;;   (defun ab:enable-visual-line-fringe-indicators ()
;;     "Enablle visual-line fringe-indicators."
;;     (setq-local visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))))
#+end_src

*** Windows
Taken from [[https://github.com/tecosaur/emacs-config][tecosaur/emacs-config]]:

I find it rather handy to be asked which buffer I want to see after splitting
the window. Let's make that happen.
First, we'll enter the new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we'll pull up ~ivy~
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

Oh, and previews are nice
#+begin_src emacs-lisp
(setq +ivy-buffer-preview t)
#+end_src

*** Flycheck Margin icons
From [[https://github.com/flycheck/flycheck/pull/1742]]

#+begin_src emacs-lisp
(use-package flycheck
  :hook ((text-mode prog-mode) . flycheck-mode)
  :hook (flycheck-mode . flycheck-set-indication-mode)
  :config
  (setq flycheck-indication-mode 'left-margin))
#+end_src

** Evil :evil:
*** COMMENT Enable =evil-numbers=
Enable =evil-numbers= for incrementing number in text

#+begin_src emacs-lisp
(require 'evil-numbers)

(define-key evil-normal-state-map "g=" 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map "g-" 'evil-numbers/dec-at-pt)

;;(global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
;;(global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
#+end_src

** Ligatures :ligatures:
Disable extra ligatures in some programming modes:

#+begin_src emacs-lisp
(setq +ligatures-extras-in-modes '(not c-mode c++-mode rust-mode python-mode))
#+end_src

** DOOM Modeline (=doom-modeline-mode=) :modeline:
Customize the =doom-modeline=

#+begin_src emacs-lisp
;; This will set the time format to 24h
(setq display-time-string-forms
      '((propertize (concat 24-hours ":" minutes))))

(display-battery-mode) ;; Display the battery status
(display-time-mode) ;; Display the time
#+end_src

* COMMENT Spell checking :spell:
Set =ispell='s dictionary to american english by default.

#+begin_src emacs-lisp
(setq ispell-dictionary "american")
#+end_src

** COMMENT Configure =hunspell= :hunspell:
Having =flyspell= and =hunspell= enabled in =init.el=, first install theses packages:

#+begin_example shell
sudo pacman -S hunspell hunspell-en_US hunspell-en_GB hunspell-fr
#+end_example

Then configure dictionaries:

#+begin_src emacs-lisp
(add-to-list 'ispell-local-dictionary-alist '("francais"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "fr_FR"); Dictionary file name
                                              nil
                                              utf-8))

(add-to-list 'ispell-local-dictionary-alist '("english"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']"
                                              t
                                              ("-d" "en_US")
                                              nil
                                              utf-8))

(setq ispell-program-name "hunspell"   ; Use hunspell to correct mistakes
      ispell-dictionary   "english")  ; Default dictionary to use
#+end_src

** Shortcuts to change dictionary :dict:
#+begin_src emacs-lisp
(defun ab-conf/spelldict (lang)
  "Switch between language dictionaries."
  (interactive)
  (cond ((eq lang 1)
         (setq flyspell-default-dictionary "american")
         (setq ispell-dictionary "american")
         (spell-fu-mode-disable)
         (spell-fu-mode-enable)
         (message "Dictionary changed to 'american'"))
        ((eq lang 2)
         (setq flyspell-default-dictionary "francais")
         (setq ispell-dictionary "francais")
         (spell-fu-mode-disable)
         (spell-fu-mode-enable)
         (message "Dictionary changed to 'francais'"))
        (t (message "No changes have been made."))))

(map! :leader
      :desc "spell/lang" "l")

(map! :leader
      :desc "ispell dictionary" "l d")

(map! :leader
      :desc "American" "l d a" #'(lambda () (interactive) (ab-conf/spelldict 1)))

(map! :leader
      :desc "Fran√ßais" "l d f" #'(lambda () (interactive) (ab-conf/spelldict 2)))
#+end_src

** Language Tool :langtool:
#+begin_src emacs-lisp
(require 'langtool)

(map! :leader
      :desc "langtool" "l l")

(map! :leader
      :desc "Check" "l l l" #'langtool-check)

(map! :leader
      :desc "Correct buffer" "l l b" #'langtool-correct-buffer)

(map! :leader
      :desc "Stop server" "l l s" #'langtool-server-stop)

(map! :leader
      :desc "Done checking" "l l d" #'langtool-check-done)

(map! :leader
      :desc "Show msg at point" "l l m" #'langtool-show-message-at-point)

(map! :leader
      :desc "Next error" "l l n" #'langtool-goto-next-error)

(map! :leader
      :desc "Previous error" "l l p" #'langtool-goto-previous-error)

(map! :leader
      :desc "Switch default language" "l l L" #'langtool-switch-default-language)
#+end_src

* Org-Mode settings :org:
** Global Org settings
Set the default org-mode directory

#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/Org/")
(setq org-roam-db-location "~/Dropbox/Org/slip-box/org-roam.db")
(setq org-roam-index-file "~/Dropbox/Org/slip-box/index.org")
(setq org-roam-directory "~/Dropbox/Org/slip-box/")
#+end_src

** Prettify Org Mode :prettify:
*** COMMENT Change font size for section levels
#+begin_src emacs-lisp
(custom-set-faces
 '(org-document-title ((t (:inherit default :height 1.5 :underline nil))))
 '(org-tag ((t (:inherit default :weight bold :height 1.0))))
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.15))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
 )
#+end_src

*** COMMENT Org Bullets :bullets:
Enable =org-bullets= to use prettier unicode symbols in Org files

#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

*** Ellipsis
Change the three dots on collapsed Org Mode sections

#+begin_src emacs-lisp
(setq org-ellipsis " ‚ñº ")

(custom-set-faces
 '(org-ellipsis ((t (:weight normal :height 0.8 :foreground "#AAAA3A")))))
#+end_src

*** Hide Markup
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Export PDF with =mintex=
Enable syntax highlighting in exported PDFs

#+begin_src emacs-lisp
(require 'org)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-src-fontify-natively t)
#+end_src

** COMMENT RTL languages :rtl:arabic:
Enables [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bidirectional-Editing.html][bidirectional editing]]

#+begin_src emacs-lisp
(defun ab-conf/set-bidi-env ()
  "interactive"
  (setq bidi-paragraph-direction 'nil))
(add-hook 'org-mode-hook 'ab-conf/set-bidi-env)
#+end_src

** COMMENT Org-CV :cv:
#+begin_src emacs-lisp
(require 'ox-moderncv)
#+end_src

*** Important notice
In the CV project, you need to import the =moderncv= from the above repo.
The compiling of the exported TeX file may fails, with a
=File `l3regex.sty' not found= error, this seems to be in relation with the new
package names in the TexLive distribution. To solve this, you need to
replace =\RequirePackage{l3regex}= by =\RequirePackage{expl3}= in
the =moderncv.cls= file.

*** Compiling the CV file
To compile, you need to call two functions, you can add them in the file
under a =:noexport:= section:

#+begin_example org

#+begin_src emacs-lisp
(org-export-to-file 'moderncv "filename.tex")
(org-latex-compile "filename.tex")
#+end_src

#+end_example

* Zettelkasten and Note taking
** Org Roam
*** Org Roam Capture templates
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain
           (function org-roam-capture--get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t))

        org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "web/${slug}"
           :head "#+title: ${title}\n#+roam_key: ${ref}\n#+created: %u\n#+last_modified: %U\n- source: ${ref}\n\n${body}\n"
           :unnarrowed t)

          ("i" "incremental" plain
           (function org-roam-capture--get-point)
           "* ${body}"
           :file-name "web/${slug}"
           :head "#+title: ${title}\n#+roam_key: ${ref}\n#+created: %u\n#+last_modified: %U\n\n${body}"
           :unnarrowed t
           :empty-lines-before 1))

        org-roam-dailies-capture-templates
        '(("d" "default" entry #'org-roam-capture--get-point
           "* %?"
           :file-name "scratch/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d>\n\n"
           :add-created t))))
#+end_src

*** Bookmark and protocol app
Add this as a bookmark in your browser:

#+begin_example js
javascript:(function(){var escapeSym=(text)=>encodeURIComponent(text).replaceAll("[(]",escape("(")).replaceAll("[)]",escape(")")).replaceAll("[']",escape("'"));location.href='org-protocol://roam-ref?template=r'+'&ref='+encodeURIComponent(location.href)+'&title='+escapeSym(document.title)+'&body='+escapeSym(window.getSelection().toString())})()
#+end_example

And create this desktop application:

#+begin_src conf :tangle ~/.local/share/applications/org-protocol.desktop :exports code
[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=/home/abdelhak/.doom.d/images/org-mode.svg
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
#+end_src

Associate =org-protocol://= links with the app:

#+begin_example sh
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_example

*** Org Roam Server
#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** Bidirectional Link Auto Complete
#+begin_src emacs-lisp
(set-company-backend! 'org-roam-mode '(company-capf
                                       company-yasnippet
                                       company-dabbrev))
#+end_src

** Deft
#+begin_src emacs-lisp
;; (defun ab-conf/deft-parse-summary (str title)
;;   (cond ((string-match "#\\+\\broam_tags\\b: \\(.*\\)$" str) (match-string 1 str))
;;         (t "no-tag")))
;; (defcustom ab-conf/deft-strip-summary-regexp "#\\+\\broam_tags\\b: \\(.*\\)\n"
;;   "Regular expression to remove file contents displayed in summary. Presently removes blank lines and `org-mode' metadata statements."
;;  :type 'regexp
;;  :safe 'stringp
;;  :group 'deft)

(use-package deft
  :after org
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-extensions '("org" "md"))
  ;;(deft-strip-summary-regexp "#\\+\\broam_tags\\b: \\(.*\\)$")
  (deft-directory "~/Dropbox/Org/slip-box/"))
;; (advice-add 'deft-parse-summary :around #'ab-conf/deft-parse-summary)
#+end_src

** Org Ref
#+begin_src emacs-lisp
(after! org-ref
    (setq! org-ref-default-bibliography '("~/Dropbox/Org/zotero-library.bib")
           org-ref-pdf-directory "~/Zotero/storage/"
           org-ref-bibliography-notes "~/Dropbox/Org/ref/notes.org"
           reftex-default-bibliography org-ref-default-bibliography))

;;(setq org-latex-pdf-process
;;      '("pdflatex -interaction nonstopmode -output-directory %o %f"
;;	"bibtex %b"
;;	"pdflatex -interaction nonstopmode -output-directory %o %f"
;;	"pdflatex -interaction nonstopmode -output-directory %o %f"))

(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)

(require 'dash)
(setq org-latex-default-packages-alist
      (-remove-item
       '("" "hyperref" nil)
       org-latex-default-packages-alist))

;; Append new packages
(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
(add-to-list 'org-latex-default-packages-alist
	     '("linktocpage,pdfstartview=FitH,colorlinks,
linkcolor=blue,anchorcolor=blue,
citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
	       "hyperref" nil)
	     t)

;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

;; some requires for basic org-ref usage
(require 'org-ref)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
#+end_src

** Org Journal
#+begin_src emacs-lisp
(use-package org-journal
  ;;:bind
  ;;("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-dir "~/Dropbox/Org/journal/")
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-date-format "%A, %d %B %Y"))

;; To display the TODOs on the Org agenda
(setq org-journal-enable-agenda-integration t)
#+end_src

** Literate programming (=org-babel=) :babel:literate:
*** COMMENT Babel languages
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (C . t)
   (C++ . t)
   (R . t)
   (calc . t)
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (eshell . t)
   (gnuplot . t)
   (latex . t)
   (lisp . t)
   (lua . t)
   (makefile . t)
   (matlab . t)
   (ocaml . t)
   (octave . t)
   (org . t)
   (perl . t)
   (plantuml . t)
   (processing . t)
   (python . t)
   (ruby . t)
   (screen . t)
   (sed . t)
   (shell . t)
   (sql . t)
   (sqlite . t)
   ))

;; (setq org-src-preserve-indentation t)
#+end_src

*** Source blocks (=src=) templates
**** Enable the new template system for Org Mode 9.2 and later
#+begin_src emacs-lisp
(setq ab-conf/new-org-templates t) ;;; (version<= "9.2" (org-version))
(when ab-conf/new-org-templates
  (require 'org-tempo))
#+end_src

**** Template definitions for old and new template systems
#+begin_src emacs-lisp
(defun ab-conf/add-org-template (old-style-template)
  (add-to-list 'org-structure-template-alist
               (if ab-conf/new-org-templates ; change the template format for Org Mode >= 9.8
                   (cons
                    (car old-style-template)
                    ;; Take the second element and trim the #+begin_ and #+end_src
                    ;; to fit the new template style
                    ;; For example,
                    ;; ("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>")
                    ;; becomes
                    ;; ("m" "src emacs-lisp\n\n" "<src lang=\"emacs-lisp\">\n\n</src>")
                    (string-trim-right
                     (substring (car (cdr old-style-template)) 8 -9)))
                 old-style-template)))
#+end_src

**** Define templates
To use this type the prefix (like =<s=) and then =TAB=

| *Prefix* | *Language + Options*                            |
|--------+-----------------------------------------------|
| =<s=     | Generic (=#src= block)                          |
|--------+-----------------------------------------------|
| =<m=     | Emacs Lisp                                    |
|--------+-----------------------------------------------|
| =<r=     | R                                             |
| =<R=     | R + session + graphics                        |
| =<RR=    | Like =R=, with graphics stored with the project |
|--------+-----------------------------------------------|
| =<p=     | Python                                        |
| =<P=     | Python + session                              |
| =<PP=    | Python + session + graphics                   |
|--------+-----------------------------------------------|
| =<b=     | Bash shell                                    |
| =<B=     | Badh shell + session                          |
| =<bn=    | Bash shell (no options)                       |
|--------+-----------------------------------------------|
| =<g=     | Graphviz                                      |
|--------+-----------------------------------------------|

***** Generic =src= block =<s=
#+begin_src emacs-lisp
(unless ab-conf/new-org-templates
  ;; this template is predefined in the new templating system
  (ab-conf/add-org-template
   '("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")))
#+end_src

***** Emacs-Lisp (=<m=)
#+begin_src emacs-lisp
;; Emacs-lisp
(ab-conf/add-org-template
 '("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))
#+end_src

***** R (=<r=, =<R=, =<RR=)
#+begin_src emacs-lisp
;; R
(ab-conf/add-org-template
 '("r" "#+begin_src R :results output :session *R* :exports both\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))

;; R, this creates an R block for graphics
;; that are stored in the =/tmp/=.
(ab-conf/add-org-template
 '("R" "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))

;; R, this creates an R block for
;; graphics that are stored in the directory of the current file.
(ab-conf/add-org-template
 '("RR" "#+begin_src R :results output graphics :file  (org-babel-temp-file (concat (file-name-directory (or load-file-name buffer-file-name)) \"figure-\") \".png\") :exports both :width 600 :height 400 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+end_src

***** Python (=<p=, =<P=, =<PP=)
#+begin_src emacs-lisp
;; Python
(ab-conf/add-org-template
 '("p" "#+begin_src python :results output :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(ab-conf/add-org-template
 '("P" "#+begin_src python :results output :session *py* :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(ab-conf/add-org-template
 '("PP" "#+begin_src python :results file :session *py* :var matplot_lib_filename=(org-babel-temp-file \"figure\" \".png\") :exports both\nimport matplotlib.pyplot as plt\n\nimport numpy\nx=numpy.linspace(-15,15)\nplt.figure(figsize=(10,5))\nplt.plot(x,numpy.cos(x)/x)\nplt.tight_layout()\n\nplt.savefig(matplot_lib_filename)\nmatplot_lib_filename\n#+end_src" "<src lang=\"python\">\n\n</src>"))
#+end_src

***** Bash Shell (=<b=, =<B=, =<bn=)
#+begin_src emacs-lisp
;; Bash Shell
(if (memq system-type '(windows-nt ms-dos))
    ;; Non-session shell execution does not seem to work under Windows, so we use
    ;; a named session just like for B.
    (ab-conf/add-org-template
     '("b" "#+begin_src shell :session session :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
  (ab-conf/add-org-template
   '("b" "#+begin_src shell :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>")))

;; Bash Shell, this comes with a session argument (e.g., in case you want to keep ssh connexions open).
(ab-conf/add-org-template
 '("B" "#+begin_src shell :session *shell* :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))

;; Bash Shell, simple box
(ab-conf/add-org-template
 '("bn" "#+begin_src shell \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+end_src

***** Graphviz (=<g=)
#+begin_src emacs-lisp
;; Graphviz
(ab-conf/add-org-template
 '("g" "#+begin_src dot :results output graphics :file \"/tmp/graph.pdf\" :exports both
digraph G {
node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname=\"Lato\"];
A[label=\"A\"]
B[label=\"B\"]
A->B
}\n#+end_src" "<src lang=\"dot\">\n\n</src>"))
#+end_src

*** COMMENT Set custom path for =ditaa= :ditaa:
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/share/java/ditaa/")
#+end_src

* GTD workflow :gtd:
Parts from this section has been taken form [[https://www.labri.fr/perso/nrougier/GTD/index.html][Nicolas P. Rougier - Get Things Done with Emacs]] article.

** Files and directories
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Dropbox/Org/inbox.org" "~/Dropbox/Org/agenda.org"
                             "~/Dropbox/Org/notes.org" "~/Dropbox/Org/projects.org"))
#+end_src

*** COMMENT Initial content of files
**** The =inbox.org= file:
#+begin_example org :eval never
#+STARTUP: content showstars indent
#+FILETAGS: inbox
#+end_example

The =STARTUP= line defines some buffer settings (initial visibility, indent mode and star visibility)
while the =FILETAGS= line define a common tag that will be inherited by all entries (=inbox= in this case).

**** The =agenda.org= file:
#+begin_example org
#+STARTUP: hideall showstars indent
#+TAGS:    event(e) meeting(m) deadline(d)
#+TAGS:    @outside(o) @company(p) @lab(b) @online(l) @canceled(c)
#+end_example

**** The =projects.org= file:
#+begin_example org
#+STARTUP: content showstars indent
#+TAGS: @home(h) @work(w) @mail(m) @comp(c) @web(b)
#+PROPERTY: Effort_ALL 0 0:05 0:10 0:15 0:30 0:45 1:00 2:00 4:00

# UNCOMMEND THESE LINES
# * Students :students:
# * Team :team:
# * Collaboratorive projects :collab:project:
# * Events organization :events:
# * Academic papers :article:
# * University :univ:
# * Personal projects :personal:project:
# * ez-Wheel :ezwheel:
# * Home :home:
#+end_example

** Capture and inbox :capture:
Taken from [[https://github.com/tecosaur/emacs-config/blob/master/config.org#splash-screen][tecosaur/emacs-config]]

#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))

(after! org-capture
 ; <<prettify-capture>>

  (defun +doct-icon-declaration-to-icon (declaration)
    "Convert :icon declaration to icon"
    (let ((name (pop declaration))
          (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
          (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
          (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
      (apply set `(,name :face ,face :v-adjust ,v-adjust))))

  (defun +doct-iconify-capture-templates (groups)
    "Add declaration's :icon to each template group in GROUPS."
    (let ((templates (doct-flatten-lists-in groups)))
      (setq doct-templates (mapcar (lambda (template)
                                     (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                                 (spec (plist-get (plist-get props :doct) :icon)))
                                       (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                      "\t"
                                                                      (nth 1 template))))
                                     template)
                                   templates))))

  (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

  (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a")
                   )
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* %?"
                              "%i %a"))
                  ("Email" :keys "e"
                   :icon ("envelope" :set "faicon" :color "blue")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %^{type|reply to|contact} %\\3 %? :email:"
                              "Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}"
                              "about %^{topic}"
                              "%U %i %a"))
                  ("Interesting" :keys "i"
                   :icon ("eye" :set "faicon" :color "lcyan")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children (("Webpage" :keys "w"
                               :icon ("globe" :set "faicon" :color "green")
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              ("Article" :keys "a"
                               :icon ("file-text" :set "octicon" :color "yellow")
                               :desc ""
                               :i-type "read:reaserch"
                               )
;;                            ("\tRecipie" :keys "r"
;;                             :icon ("spoon" :set "faicon" :color "dorange")
;;                             :file +org-capture-recipies
;;                             :headline "Unsorted"
;;                             :template "%(org-chef-get-recipe-from-url)"
;;                             )
                              ("Information" :keys "i"
                               :icon ("info-circle" :set "faicon" :color "blue")
                               :desc ""
                               :i-type "read:info"
                               )
                              ("Idea" :keys "I"
                               :icon ("bubble_chart" :set "material" :color "silver")
                               :desc ""
                               :i-type "idea"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))
                  ("Project" :keys "p"
                   :icon ("repo" :set "octicon" :color "silver")
                   :prepend t
                   :type entry
                   :headline "Inbox"
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :file ""
                   :custom (:time-or-todo "")
                   :children (("Project-local todo" :keys "t"
                               :icon ("checklist" :set "octicon" :color "green")
                               :time-or-todo "TODO"
                               :file +org-capture-project-todo-file)
                              ("Project-local note" :keys "n"
                               :icon ("sticky-note" :set "faicon" :color "yellow")
                               :time-or-todo "%U"
                               :file +org-capture-project-notes-file)
                              ("Project-local changelog" :keys "c"
                               :icon ("list" :set "faicon" :color "blue")
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-project-changelog-file))
                   )
                  ("\tCentralised project templates"
                   :keys "o"
                   :type entry
                   :prepend t
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :children (("Project todo"
                               :keys "t"
                               :prepend nil
                               :time-or-todo "TODO"
                               :heading "Tasks"
                               :file +org-capture-central-project-todo-file)
                              ("Project note"
                               :keys "n"
                               :time-or-todo "%U"
                               :heading "Notes"
                               :file +org-capture-central-project-notes-file)
                              ("Project changelog"
                               :keys "c"
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-central-project-changelog-file))
                   )))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
              (defun org-capture-reinitialise-hook ()
                (when (display-graphic-p)
                  (set-org-capture-templates)
                  (remove-hook 'server-after-make-frame-hook
                               #'org-capture-reinitialise-hook))))))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"‚Ä¶

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "‚Ä∫" 'face 'font-lock-comment-face) "  " desc "‚Ä¶" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys
                                                  prompt
                                                  (not (pos-visible-in-window-p (1- (point-max)))))))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src

The [[file:~/.emacs.d/bin/org-capture][org-capture bin]] is rather nice, but I'd be nicer with a smaller frame, and
no modeline.
#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
;; (alist-get 'name +org-capture-frame-parameters) "‚ùñ Capture") ;; ATM hardcoded in other places, so changing breaks stuff
(setq +org-capture-fn
      (lambda ()
        (interactive)
        (set-window-parameter nil 'mode-line-format 'none)
        (org-capture)))
#+end_src

*** COMMENT My old config
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i" "Inbox" entry (file "inbox.org")
         "* TODO %?\n/Entered on/ %U")
        ("m" "Meeting" entry (file+headline "agenda.org" "Future")
         "* %? :meeting:\n<%<%Y-%m-%d %a %H:00>>")
        ("n" "Note" entry (file "notes.org")
         "* Note (%a)\n/Entered on/ %U\n" "\n" "%?")
        ("e" "Inbox [mu4e]" entry (file "inbox.org")
         "* TODO Reply to \"%a\" %?\n/Entered on/ %U")))


(defun org-capture-inbox ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "i"))

(defun org-capture-mail ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "@"))
#+end_src

** Display and key bindings
#+begin_src emacs-lisp
;; Use full window for org-capture
;; (add-hook 'org-capture-mode-hook 'delete-other-windows)

;; Key bindings
(define-key global-map            (kbd "C-c a") 'org-agenda)
(define-key global-map            (kbd "C-c c") 'org-capture)
(define-key global-map            (kbd "C-c i") 'org-capture-inbox)

;; Only if you use mu4e
(require 'mu4e)
(define-key mu4e-headers-mode-map (kbd "C-c i") 'org-capture-mail)
(define-key mu4e-view-mode-map    (kbd "C-c i") 'org-capture-mail)
#+end_src

** Refile
#+begin_src emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-targets
      '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
#+end_src

** TODOs
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")))
(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
#+end_src

** Agenda
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

*** Org Super Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "project"
                           :order 14)
                          (:name "Research"
                           :tag "research"
                           :order 15)
                          (:name "To read"
                           :tag "read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "univ"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("trivial" "unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("chore" "routine" "daily")))))))))

        ("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

* Windows and buffers :win:buffer:
** Windows splitting
Taken from [[https://github.com/tecosaur/emacs-config][tecosaur/emacs-config]]:

I find it rather handy to be asked which buffer I want to see after splitting
the window. Let's make that happen.
First, we'll enter the new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we'll pull up ~ivy~
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

Oh, and previews are nice
#+begin_src emacs-lisp
(setq +ivy-buffer-preview t)
#+end_src

** COMMENT Add margins to window
Add margins to buffer in Org Mode, change the =visual-fill-column-width= to the desired width of
the actual window (in letters, and counting the line number).

#+begin_src emacs-lisp
(defun ab-conf/org-mode-visual-fill ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . ab-conf/org-mode-visual-fill))
#+end_src

Add the same hook to other modes (=text-mode=, =markdown-mode=, =tex-mode=, =repo-mode= and =magit-mode=),
you can set additional modes in the list below:

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook
                markdow-mode-hook
                tex-mode-hook
                magit-mode-hook
                mu4e-view-mode-hook
                repo-mode-hook))
  (add-hook hook 'ab-conf/org-mode-visual-fill))
#+end_src

* Applications :apps:
** PDF viewer :pdf:
Org opens PDF files with Zathura

#+begin_example shell
# First install the zathura and the plugins
pacman -S zathura-pdf-poppler zathura-ps zathura-cb zathura-djvu zathura
#+end_example

#+begin_src emacs-lisp
(setq org-ref-open-pdf-function
      (lambda (fpath)
        (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+end_src

** Browser (=eww=) :eww:browser:
Set urls to open in a specific browser (=eww= here).

*** COMMENT Display webpages in =eww=.
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

** File manager (=dired=) :dired:
Enable image previews in =dired= and use Vim-style key binding for =<UP>= and =<DOWN>=

#+begin_src emacs-lisp
(map!
  (:after dired
    (:map dired-mode-map
     "C-x i" #'peep-dired
     )))

(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

** Emacs Multi-Media System (=emms=) :emms:music:
#+begin_src emacs-lisp
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playing-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*EMMS*"
      emms-mode-line-format " [ %s ]"
      emms-show-format "%s"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)

(defun my-emms-track-description-function (track)
  "Return a description of the current TRACK."
  (file-name-nondirectory (file-name-sans-extension (emms-track-name track))))

(setq emms-track-description-function
      'my-emms-track-description-function)

(require 'emms-mode-line-cycle)
(emms-mode-line-cycle 1)
#+end_src

*** Define keybinding
#+begin_src emacs-lisp
(map! :leader
      :desc "Go to emms playlist"
      "a a" #'emms-playlist-mode-go
      :leader
      :desc "Emms pause track"
      "a x" #'emms-pause
      :leader
      :desc "Emms stop track"
      "a s" #'emms-stop
      :leader
      :desc "Emms play previous track"
      "a p" #'emms-previous
      :leader
      :desc "Emms play next track"
      "a n" #'emms-next)
#+end_src

** Serial port support (=serial-term=) :serial:
#+begin_src emacs-lisp
(map! :leader
      :desc "Open serial port terminal" "o s" #'serial-term)
#+end_src

* Communication and messaging
** Slack :slack:
Needs to add =slack= to =$DOOMDIR/packages.el=
See [[https://github.com/yuya373/emacs-slack#how-to-get-token]] to see how to get tokens.

#+begin_src emacs-lisp
;; (use-package helm-slack :after (slack)) ;; optional
(use-package slack
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   :name "YOUR_TEAM"
   :default t
   :token "YOUR-TOKEN-GOES-HERE"
   :subscribed-channels '(YOUR SUBSCRIBED CHANNELS)
   :full-and-display-names t)
  (evil-define-key 'normal slack-info-mode-map
    ",u" 'slack-room-update-messages)
  (evil-define-key 'normal slack-mode-map
    ",c" 'slack-buffer-kill
    ",ra" 'slack-message-add-reaction
    ",rr" 'slack-message-remove-reaction
    ",rs" 'slack-message-show-reaction-users
    ",pl" 'slack-room-pins-list
    ",pa" 'slack-message-pins-add
    ",pr" 'slack-message-pins-remove
    ",mm" 'slack-message-write-another-buffer
    ",me" 'slack-message-edit
    ",md" 'slack-message-delete
    ",u" 'slack-room-update-messages
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel
    "\C-n" 'slack-buffer-goto-next-message
    "\C-p" 'slack-buffer-goto-prev-message)
  (evil-define-key 'normal slack-edit-message-mode-map
    ",k" 'slack-message-cancel-edit
    ",s" 'slack-message-send-from-buffer
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel))

;; (use-package alert
;;   :commands (alert)
;;   :init
;;   (setq alert-default-style 'notifier))
#+end_src

** mu4e :mu4e:
Configuring =mu4e= email accounts, note that you need to have a proper
=mbsyncrc= file in the right directory.

You will need to:
- Install =mu= and =mbsync-git=
- Setup a proper configuration file for your accounts at =~/config/mu4e/mbsyncrc=
- Setup the associated password file =mbsyncpass-account1= in the same directory
  for each account
- Encrypt the password file using =gpg -c mbsyncpass-account1=
- Run =mu init --maildir=~/Maildir --my-address=user@host.bla=
- Run =mbsync -c ~/.config/mu4e/mbsyncrc -a=
- For sending mails from =mu4e=, add =authinfo= files for each account, file contains
  a line in this format =machine mail.example.org port 587 login myuser password mypasswd=

#+begin_src emacs-lisp
(after! mu4e
  (require 'org-msg)
  (require 'smtpmail)
  ;; Common parameters
  (setq smtpmail-auth-credentials "~/.authinfo.gpg"
        mu4e-update-interval (* 5 60) ;; Every 5min
        mu4e-get-mail-command "mbsync -a"
        mu4e-maildir "~/Maildir"
        ;;user-full-name "Abdelhak Bougouffa" ;; Already set at the beginning
        mu4e-compose-signature "Abdelhak Bougouffa\n- Ph.D. Candidate | R&D Engineer"
        message-send-mail-function 'smtpmail-send-it
        mu4e-sent-messages-behavior 'sent)) ;; Save sent messages

(set-email-account! "Univ Paris-Saclay"
                    '((mu4e-sent-folder             . "/up-saclay/Sent")
                      (mu4e-drafts-folder           . "/up-saclay/Drafts")
                      (mu4e-trash-folder            . "/up-saclay/Trash")
                      (mu4e-refile-folder           . "/up-saclay/Archive")
                      (user-mail-address            . "abdelhak.bougouffa@universite-paris-saclay.fr")
                      (smtpmail-smtp-user           . "abdelhak.bougouffa@universite-paris-saclay.fr")
                      (smtpmail-stream-type         . ssl)
                      (smtpmail-default-smtp-server . "smtps.universite-paris-saclay.fr")
                      (smtpmail-smtp-server         . "smtps.universite-paris-saclay.fr")
                      (smtpmail-smtp-service        . 465)
                      ) t)

(set-email-account! "Gmail"
                    '((mu4e-sent-folder             . "/gmail/Sent Mail")
                      (mu4e-drafts-folder           . "/gmail/Drafts")
                      (mu4e-trash-folder            . "/gmail/Trash")
                      (mu4e-refile-folder           . "/gmail/All Mail")
                      (user-mail-address            . "abdelhak.alg@gmail.com")
                      (mu4e-compose-signature       . "Abdelhak")
                      (smtpmail-smtp-user           . "abdelhak.alg@gmail.com")
                      (smtpmail-stream-type         . starttls)
                      (smtpmail-default-smtp-server . "smtp.googlemail.com")
                      (smtpmail-smtp-server         . "smtp.googlemail.com")
                      (smtpmail-smtp-service        . 587)
                      ) t)
#+end_src

* Programming :programming:
** editorconfig
#+begin_src emacs-lisp
#+end_src

** CMake :cmake:
*** COMMENT =cmake-ide=
Disabled, it depends heavily on =rtags=, which runs slower than new LSP based configurations.

#+begin_src emacs-lisp
(require 'rtags)
(cmake-ide-setup)
#+end_src

** COMMENT Rust :rust:
#+begin_src emacs-lisp
(use-package racer
  :requires rust-mode

  :init (setq racer-rust-src-path
              (concat (string-trim
                       (shell-command-to-string "rustc --print sysroot"))
                      "/lib/rustlib/src/rust/src"))

  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+end_src

** Yocto/Bitbake :yocto:
#+begin_src emacs-lisp
(require 'bitbake)
(setq auto-mode-alist (cons '("\\.bb$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.inc$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.bbappend$" . bitbake-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.bbclass$" . bitbake-mode) auto-mode-alist))
#+end_src

** ROS :ros:
Add ROS specific file formats:

#+begin_src emacs-lisp
(setq auto-mode-alist (cons '("\\.launch$" . xml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.urdf$" . xml-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.rviz$" . conf-unix-mode) auto-mode-alist))
#+end_src

** LSP :lsp:
*** COMMENT Set LSP to use =clangd= in C/C++ :clangd:c:cpp:
#+begin_src emacs-lisp
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

*** Enable =lsp= over =tramp= :tramp:
**** For Python
#+begin_src emacs-lisp
(require 'lsp-mode)
(require 'lsp-pyright)
;;(setq lsp-enable-snippet nil)
;;(setq lsp-log-io t)
(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-tramp-connection (lambda ()
                                          (cons "pyright-langserver"
                                                lsp-pyright-langserver-command-args)))
  :major-modes '(python-mode)
  :remote? t
  :server-id 'pyright-remote
  ;;  :multi-root t
  ;;  :priority 3
  ;;  :initialization-options (lambda () (ht-merge (lsp-configuration-section "pyright")
  ;;                                               (lsp-configuration-section "python")))
  ;; :initialized-fn (lambda (workspace)
  ;;                   (with-lsp-workspace workspace
  ;;                     (lsp--set-configuration
  ;;                      (ht-merge (lsp-configuration-section "pyright")
  ;;                                (lsp-configuration-section "python")))))
  ;; :notification-handlers (lsp-ht ("pyright/beginProgress" 'lsp-pyright--begin-progress-callback)
  ;;                                ("pyright/reportProgress" 'lsp-pyright--report-progress-callback)
  ;;                                ("pyright/endProgress" 'lsp-pyright--end-progress-callback))

  ))

(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

**** For C/C++
#+begin_src emacs-lisp
(require 'lsp-mode)
(require 'ccls)
(setq lsp-enable-snippet nil)
(setq lsp-log-io t)
(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-tramp-connection (lambda ()
                                          (cons ccls-executable ; executable name on remote machine 'ccls'
                                                ccls-args)))
  :major-modes '(c-mode c++-mode objc-mode cuda-mode)
  :remote? t
  :server-id 'ccls-remote
  ;;  :multi-root t
  ;;  :priority 3
  ;;  :initialization-options (lambda () (ht-merge (lsp-configuration-section "c++")
  ;;                                               (lsp-configuration-section "ccls")))
  ;; :initialized-fn (lambda (workspace)
  ;;                   (with-lsp-workspace workspace
  ;;                     (lsp--set-configuration
  ;;                      (ht-merge (lsp-configuration-section "c++")
  ;;                                (lsp-configuration-section "ccls")))))
  ;; :notification-handlers (lsp-ht ("$ccls/publishSkippedRanges" 'cls--publish-skipped-ranges)
  ;;                                ("$ccls/publishSemanticHighlight" 'cls--publish-semantic-highlight))
  ))

(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

** DAP

#+begin_src emacs-lisp
(dap-auto-configure-mode -1)
#+end_src
